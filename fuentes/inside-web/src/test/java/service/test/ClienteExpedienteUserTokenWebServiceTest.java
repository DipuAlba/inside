/*
 * Copyright (C) 2016 MINHAP, Gobierno de Espa√±a This program is licensed and may be used, modified
 * and redistributed under the terms of the European Public License (EUPL), either version 1.1 or
 * (at your option) any later version as soon as they are approved by the European Commission.
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and more details. You
 * should have received a copy of the EUPL1.1 license along with this program; if not, you may find
 * it at http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 */

package service.test;

import java.io.File;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import junit.framework.TestCase;
import org.apache.geronimo.mail.util.Base64;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import es.mpt.dsic.inside.web.security.authentication.UserAuthentication;
import es.mpt.dsic.inside.ws.exception.InsideWSException;
import es.mpt.dsic.inside.ws.operation.ExpedienteOperationWebService;
import es.mpt.dsic.inside.xml.eni.expediente.metadatos.EnumeracionEstados;
import es.mpt.dsic.inside.xml.inside.MetadatoAdicional;
import es.mpt.dsic.inside.xml.inside.TipoMetadatosAdicionales;
import es.mpt.dsic.inside.xml.inside.ws.credential.WSCredentialInside;
import es.mpt.dsic.inside.xml.inside.ws.expediente.TipoExpedienteEniFileInside;
import es.mpt.dsic.inside.xml.inside.ws.expediente.conversion.TipoDocumentoIndizadoConversion;
import es.mpt.dsic.inside.xml.inside.ws.expediente.conversion.TipoExpedienteConversionInside;
import es.mpt.dsic.inside.xml.inside.ws.expediente.conversion.TipoIndiceConversion;
import es.mpt.dsic.inside.xml.inside.ws.expediente.conversion.TipoOpcionesVisualizacionIndice;
import es.mpt.dsic.inside.xml.inside.ws.expediente.conversion.TipoOpcionesVisualizacionIndice.FilasNombreOrganismo;
import es.mpt.dsic.inside.xml.inside.ws.validacion.expediente.resultados.TipoResultadoValidacionExpedienteInside;
import static org.junit.Assert.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:es/mpt/dsic/inside/context/inside-ws-context.xml",
    "classpath:es/mpt/dsic/inside/context/inside-security-context.xml"})
public class ClienteExpedienteUserTokenWebServiceTest extends TestCase {

  public static WSCredentialInside INFO_CREDENCIALES;


  public static String CONFIG_PATH =
      "C:\\desarrollo\\workspaceInside\\inside-web\\src\\config\\local";
  public static final String TRUSTSTORE_FILE = "trustStore.jks";



  @Autowired
  public ExpedienteOperationWebService expedienteOperationWebService;

  static {
    INFO_CREDENCIALES = new WSCredentialInside();
    INFO_CREDENCIALES.setIdaplicacion("prueba");
    INFO_CREDENCIALES.setPassword("test");

    UserAuthentication authActualizado = new UserAuthentication(INFO_CREDENCIALES.getIdaplicacion(),
        null, null, null, INFO_CREDENCIALES.getIdaplicacion(), null);
    SecurityContextHolder.getContext().setAuthentication(authActualizado);


    System.setProperty("javax.net.ssl.trustStore", CONFIG_PATH + File.separator + TRUSTSTORE_FILE);
    System.setProperty("javax.net.ssl.trustStorePassword", "changeit");
    System.setProperty("javax.net.ssl.trustStoreType", "JKS");

    System.setProperty("config.path",
        "C:\\desarrollo\\workspaceInside\\inside-web\\src\\config\\local");
    System.setProperty("local_home_app", "C\\Temp\\inside");


  }



  private TipoExpedienteEniFileInside getExpedienteInsertaryValidar() {
    TipoExpedienteEniFileInside expediente = new TipoExpedienteEniFileInside();
    expediente.setExpedienteEniBytes(Base64.decode(
        ""
            .getBytes()));

    return expediente;
  }


  private String getExpedienteIdentificadorRecuperar_CORRECTO() {
    return "ES_E04912101_2016_EXP_mauri_000000009";
  }


  private String getExpedienteIdentificadorEliminar() {
    return "ES_E04975701_2017_EXP_699_TEST";
  }



  // Crea un expediente tipo todo correcto
  private TipoExpedienteConversionInside expedienteCorrectoCONSTANT() {

    TipoExpedienteConversionInside expedienteAux = new TipoExpedienteConversionInside();

    // metadatos
    // *************************************************************************************************************************
    TipoExpedienteConversionInside.MetadatosEni metadatosEni =
        new TipoExpedienteConversionInside.MetadatosEni();
    metadatosEni.setVersionNTI("http://administracionelectronica.gob.es/ENI/XSD/v1.0/expediente-e");
    metadatosEni.setIdentificador("ES_EA9999999_2017_EXP_00_CrearExpedienteTest");
    metadatosEni.setClasificacion("123456");
    TipoExpedienteConversionInside.MetadatosEni.Estado estado =
        new TipoExpedienteConversionInside.MetadatosEni.Estado();
    estado.setValue(EnumeracionEstados.E_01);
    metadatosEni.setEstado(estado);
    GregorianCalendar calendario = new GregorianCalendar();
    calendario.setTime(new Date());
    XMLGregorianCalendar xmlCal = null;
    try {
      xmlCal = DatatypeFactory.newInstance().newXMLGregorianCalendar(calendario);
    } catch (DatatypeConfigurationException e1) {

    }
    metadatosEni.setFechaAperturaExpediente(xmlCal);

    metadatosEni.getOrgano().add("EA9999999");

    metadatosEni.getInteresado().add("interesado 1");
    // *************************************************************************************************************************

    // indice
    // *************************************************************************************************************************
    TipoIndiceConversion tipoIndiceConversion = new TipoIndiceConversion();
    tipoIndiceConversion.setFechaIndiceElectronico(xmlCal);

    TipoDocumentoIndizadoConversion documentoindizado = new TipoDocumentoIndizadoConversion();
    documentoindizado.setFechaIncorporacionExpediente(xmlCal);
    documentoindizado.setValorHuella("6c0b7b19c28509f5444fb7eb9f17a2f4");
    documentoindizado.setOrdenDocumentoExpediente("1");
    documentoindizado.setIdentificadorDocumento("ES_E03099601_2017_5");
    documentoindizado.setFuncionResumen("md5");

    tipoIndiceConversion.getDocumentoIndizadoOrExpedienteIndizadoOrCarpetaIndizada()
        .add(documentoindizado);
    // *************************************************************************************************************************


    // Visualizacion
    // *************************************************************************************************************************
    TipoOpcionesVisualizacionIndice tipoOpcionesVisualizacionIndice =
        new TipoOpcionesVisualizacionIndice();
    tipoOpcionesVisualizacionIndice.setEstamparImagen(false);
    tipoOpcionesVisualizacionIndice.setEstamparNombreOrganismo(false);
    tipoOpcionesVisualizacionIndice.setEstamparPie(false);
    tipoOpcionesVisualizacionIndice.setFilasNombreOrganismo(new FilasNombreOrganismo());
    tipoOpcionesVisualizacionIndice.setTextoPie("false");
    // *************************************************************************************************************************

    // rellenar el expediente
    expedienteAux.setMetadatosEni(metadatosEni);
    expedienteAux.setOpcionesVisualizacion(tipoOpcionesVisualizacionIndice);
    expedienteAux.setIndice(tipoIndiceConversion);


    return expedienteAux;
  }


  private TipoMetadatosAdicionales metadatosAdicionalesCONSTANT() {
    // Metadatos adicionales
    TipoMetadatosAdicionales metadatosAdicionalesAux = new TipoMetadatosAdicionales();
    MetadatoAdicional metadi = new MetadatoAdicional();
    metadi.setTipo("string");
    metadi.setNombre("Metadato_Adicional_1");
    metadi.setValor("Valor_1");
    metadatosAdicionalesAux.getMetadatoAdicional().add(metadi);

    return metadatosAdicionalesAux;

  }


  @Test
  public void testCrearExpedienteEniFileXML() {
    System.out.println("Inicio testCrearExpedienteEniFileXML_CORRECTO");

    // Expediente
    TipoExpedienteConversionInside expediente = expedienteCorrectoCONSTANT();
    TipoMetadatosAdicionales metadatosAdicionales = metadatosAdicionalesCONSTANT();

    try {
      TipoExpedienteEniFileInside result = expedienteOperationWebService
          .crearExpedienteEniFileXMLServicio(expediente, metadatosAdicionales, INFO_CREDENCIALES);
      assertNotNull(result);
      assertNotNull(result.getExpedienteEniBytes());

    } catch (InsideWSException e) {
      throw new AssertionError("Error testCrearExpedienteEniFileXML_CORRECTO: " + e.getMessage());
    }
  }



  @Test
  public void testInsertarExpedienteEniFileXML() {
    System.out.println("Inicio testInsertarExpedienteEniFileXML");

    auxiliarEliminarExpParaInsertar();

    System.out.println("Inicio testInsertarExpedienteEniFileXML");
    TipoExpedienteEniFileInside expedienteEniFile = getExpedienteInsertaryValidar();
    try {
      TipoExpedienteEniFileInside result = expedienteOperationWebService
          .insertarExpedienteEniFileXMLServicio(expedienteEniFile, INFO_CREDENCIALES);
      assertNotNull(result);
      assertNotNull(result.getExpedienteEniBytes());
    } catch (InsideWSException e) {
      throw new AssertionError("Error testInsertarExpedienteEniFileXML: " + e.getMessage());
    }
  }



  @Test
  public void testRecuperarExpedienteEniFileXML() {
    System.out.println("Inicio testRecuperarExpedienteEniFileXML");
    String expedienteIdentificador = getExpedienteIdentificadorRecuperar_CORRECTO();
    try {
      TipoExpedienteEniFileInside result = expedienteOperationWebService
          .recuperarExpedienteEniFileXMLServicio(expedienteIdentificador, INFO_CREDENCIALES);
      assertNotNull(result);
      assertNotNull(result.getExpedienteEniBytes());
    } catch (InsideWSException e) {
      throw new AssertionError("Error testRecuperarExpedienteEniFileXML: " + e.getMessage());
    }
  }



  @Test
  public void testValidarExpedienteEniFileXML() {
    System.out.println("Inicio testValidarExpedienteEniFileXML");
    TipoExpedienteEniFileInside expedienteEniFile = getExpedienteInsertaryValidar();
    try {
      TipoResultadoValidacionExpedienteInside result = expedienteOperationWebService
          .validarExpedienteEniFileXMLServicio(expedienteEniFile, INFO_CREDENCIALES);
      assertNotNull(result);
      assertNotNull(result.getValidacionDetalle());
      for (int i = 0; i < result.getValidacionDetalle().size(); i++) {
        assertTrue(result.getValidacionDetalle().get(i).isResultadoValidacion());
      }

    } catch (InsideWSException e) {
      throw new AssertionError("Error testValidarExpedienteEniFileXML: " + e.getMessage());
    }
  }



  @Test
  public void testEliminarExpedienteEniFileXML() {
    System.out.println("Inicio testEliminarExpedienteEniFileXML");

    auxiliarInsertaExpParaEliminar();


    String expedienteIdentificador = getExpedienteIdentificadorEliminar();
    try {
      TipoExpedienteEniFileInside result = expedienteOperationWebService
          .eliminarExpedienteEniFileXMLServicio(expedienteIdentificador, INFO_CREDENCIALES);
      assertNotNull(result);
      assertNotNull(result.getExpedienteEniBytes());
    } catch (InsideWSException e) {
      throw new AssertionError("Error testEliminarExpedienteEniFileXML: " + e.getMessage());
    }
  }



  private void auxiliarInsertaExpParaEliminar() {
    // inserto el expediente para eliminar
    TipoExpedienteEniFileInside expediente = getExpedienteInsertaryValidar();
    try {
      TipoExpedienteEniFileInside result = expedienteOperationWebService
          .insertarExpedienteEniFileXMLServicio(expediente, INFO_CREDENCIALES);
    } catch (InsideWSException e) {
      System.out.println("Ya existe, continuo para eliminar");
    }

  }

  private void auxiliarEliminarExpParaInsertar() {
    // inserto el expediente para eliminar
    String expedienteIdentificador = getExpedienteIdentificadorEliminar();
    try {
      TipoExpedienteEniFileInside result = expedienteOperationWebService
          .eliminarExpedienteEniFileXMLServicio(expedienteIdentificador, INFO_CREDENCIALES);

    } catch (InsideWSException e) {
      System.out.println("Ya esta eliminado, continuo para Insertar");
    }

  }


}
